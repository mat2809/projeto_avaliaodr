# Algoritmo do Sistema de Controle de Loja

## 1. Início do sistema
1.1. O sistema inicia executando o arquivo main.py.  
1.2. A interface gráfica (Tkinter) é exibida com a tela de login.  

## 2. Autenticação do usuário
2.1. O usuário insere nome de usuário e senha.  
2.2. O sistema verifica os dados no banco de dados (tabela `usuarios`).  
2.3. Se os dados estiverem corretos, o sistema permite o acesso.  
2.4. Se os dados estiverem incorretos, uma mensagem de erro é exibida.

## 3. Acesso ao menu principal
3.1. Após o login, o usuário acessa a janela principal com as opções:  
  - Cadastro de Produtos  
  - Cadastro de Clientes  
  - Registro de Vendas  
  - Sair  

## 4. Cadastro de produtos
4.1. O usuário preenche nome, preço e estoque do produto.  
4.2. O sistema salva os dados na tabela `produtos`.  
4.3. O sistema exibe uma mensagem de sucesso.

## 5. Cadastro de clientes
5.1. O usuário preenche nome e e-mail do cliente.  
5.2. O sistema salva os dados na tabela `clientes`.  
5.3. O sistema permite visualizar todos os clientes cadastrados.

## 6. Registro de vendas
6.1. O usuário seleciona um cliente.  
6.2. O usuário seleciona os produtos a serem vendidos e define a quantidade.  
6.3. O sistema verifica se há estoque disponível.  
6.4. O sistema calcula o total da venda.  
6.5. O sistema salva os dados da venda na tabela `vendas`.  
6.6. Os itens da venda são salvos na tabela `itens_venda`.  
6.7. O estoque dos produtos é atualizado automaticamente.

## 7. Encerramento
7.1. O usuário pode sair da aplicação pelo botão “Sair”.  
7.2. A aplicação encerra o processo com `mainloop()` finalizado.

## 8. Observações técnicas
- Todas as operações com o banco são feitas via `models/` com uso de conexão MySQL.  
- A comunicação entre interface (Tkinter) e banco é feita via controladores (`controllers/`).  
- A separação de responsabilidades segue o padrão MVC:
  - Models: acesso e manipulação de dados  
  - Views: interface gráfica Tkinter  
  - Controllers: lógica entre view e model

# Fim do Algoritmo
